on: [push, pull_request]
name: Actions CI Workflow
env:
  BUILD_VERSION: b${{ github.run_id }}
  tf_version: "latest"
  tf_working_dir: "terraform"
jobs:
  "Build":
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: DOCKER_BUILDKIT=1 docker build
          --build-arg BUILD_APP_VERSION=$BUILD_VERSION
          -t gcr.io/vapias/todo-apiserver:latest
          "."

      - name: Export Docker Image
        run: docker save gcr.io/vapias/todo-apiserver:latest > image.tar

      - uses: actions/upload-artifact@v1
        with:
          name: docker-image-tar
          path: image.tar
  "Integration-Test":
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2-beta
        with:
          go-version: "^1.13.1"

      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Integration Test
        run: make integration_ci

      - name: Upload codecov
        run: |
          bash <(curl -s https://codecov.io/bash) -F integration ||
            echo 'Codecov failed to upload'
  "Unit-Test":
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2-beta
        with:
          go-version: "^1.13.1"

      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Unit Test
        run: make unit_ci

      - name: Upload codecov
        run: |
          bash <(curl -s https://codecov.io/bash) -F unittests || 
            echo 'Codecov failed to upload'

  "Push-Docker-Image":
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    needs:
      - "Build"
      - "Integration-Test"
      - "Unit-Test"
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: docker-image-tar

      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "286.0.0"
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Login GCR
        run: gcloud auth configure-docker --quiet

      - name: Load docker image
        run: docker load --input docker-image-tar/image.tar

      - name: Tag docker image
        run: docker tag
          gcr.io/vapias/todo-apiserver:latest
          gcr.io/vapias/todo-apiserver:$BUILD_VERSION

      - name: Push docker image
        run: |
          docker push gcr.io/vapias/todo-apiserver:latest
          docker push gcr.io/vapias/todo-apiserver:$BUILD_VERSION
  "Deploy":
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    needs:
      - "Push-Docker-Image"
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TF_VAR_JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      TF_VAR_POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      TF_VAR_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      TF_VAR_POSTGRES_NAME: ${{ secrets.POSTGRES_NAME }}
      TF_VAR_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      TF_VAR_REDIS_ADDR: ${{ secrets.REDIS_ADDR }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.tf_version }}
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Terraform Init
        run: terraform init -input=false -no-color
          
      - name: Make prod.tfvars
        run: cat prod.template.tfvars | IMAGE_TAG=$BUILD_VERSION envsubst > prod.tfvars

      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "286.0.0"
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Make mask.sh
        run: | 
          echo "sed \\" > mask.sh
          env | grep -i TF_VAR_ | column -t -s '=' | awk '{ print $2 }' | while read line; do echo "-e s/${line}/**********/g \\" >> mask.sh; done

      - name: Terraform Plan
        run: terraform plan -no-color -var-file="prod.tfvars" | sh mask.sh

      - name: Terraform Apply
        run: terraform apply -auto-approve -no-color -var-file="prod.tfvars" | sh mask.sh

