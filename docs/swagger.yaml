basePath: /api
definitions:
  api.ErrorMetaData:
    properties:
      message:
        type: string
    type: object
  api.ErrorResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/api.ErrorMetaData'
        type: array
    type: object
  auth.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  auth.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      type:
        type: string
    type: object
  common.APIError:
    properties:
      message:
        type: string
    type: object
  common.ErrorResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/common.APIError'
        type: array
    type: object
  todo.AddTodoRequest:
    properties:
      contents:
        type: string
      title:
        type: string
    required:
    - contents
    - title
    type: object
  todo.TodoResponse:
    properties:
      assignor_id:
        type: integer
      contents:
        type: string
      created_at:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  user.CreateUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  user.UserResponse:
    properties:
      create_at:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
host: '{{.Host}}'
info:
  contact: {}
  description: This is a apas todo api server.
  license: {}
  title: APAS TODO API
  version: "1.0"
paths:
  /auth/token:
    post:
      consumes:
      - application/json
      description: Issue new token
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/auth.TokenResponse'
            type: object
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
        "401":
          description: Invalid credential
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
      tags:
      - Auth API
  /healthy:
    get:
      description: Get server healthy
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - App API
  /todos:
    get:
      consumes:
      - application/json
      description: Fetch todos by user id
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/todo.TodoResponse'
            type: array
        "404":
          description: User Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
            type: object
      tags:
      - Todo API
    post:
      consumes:
      - application/json
      description: Add new todo
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/todo.AddTodoRequest'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: ok
          schema:
            $ref: '#/definitions/todo.TodoResponse'
            type: object
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/api.ErrorResponse'
            type: object
      tags:
      - Todo API
  /users:
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: user payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: ok
          schema:
            $ref: '#/definitions/user.UserResponse'
            type: object
        "400":
          description: Invalid user payload
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
        "409":
          description: Already exists user
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
      tags:
      - User API
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetch user by user id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/user.UserResponse'
            type: object
        "404":
          description: User Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
      tags:
      - User API
  /users/{username}:
    get:
      consumes:
      - application/json
      description: Fetch user by username
      parameters:
      - description: User Name
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/user.UserResponse'
            type: object
        "404":
          description: User Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
            type: object
      tags:
      - User API
swagger: "2.0"
